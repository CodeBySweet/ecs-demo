name: ECS Cluster CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Select Terraform action to execute'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: "us-east-1"
  TF_VERSION: "1.5.7"
  ECR_REPOSITORY: "my-app-repo"
  ECS_CLUSTER: "my-app-cluster"
  ECS_SERVICE: "my-app-service"
  DOCKERFILE_PATH: "./Dockerfile"
  TF_WORKING_DIR: "."
  SCAN_TIMEOUT_MINUTES: 5
  MAX_SCAN_RETRIES: 30
  FAIL_ON_HIGH_VULNERABILITIES: true

jobs:
  terraform:
    name: Terraform Operations
    runs-on: ubuntu-latest
    environment: production

    steps:
    # ----------------------------------
    # Step 1: Checkout the code
    # ----------------------------------
    - name: Checkout repository
      uses: actions/checkout@v3

    # ----------------------------------
    # Step 2: Configure AWS credentials
    # ----------------------------------
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ----------------------------------
    # Step 3: Setup Terraform
    # ----------------------------------
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    # ----------------------------------
    # Step 4: Initialize Terraform
    # ----------------------------------
    - name: Terraform Init
      id: init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    # ----------------------------------
    # Step 5: Validate Terraform configuration
    # ----------------------------------
    - name: Terraform Validate
      id: validate
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform validate
      
    # ----------------------------------
    # Step 6: Check Terraform formatting
    # ----------------------------------
    - name: Terraform Format Check
      id: fmt
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform fmt -check -recursive

    # ----------------------------------
    # Step 7: Conditional Terraform Operations
    # ----------------------------------
    - name: Terraform Plan
      id: plan
      if: github.event.inputs.terraform_action == 'plan'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform plan -input=false -out=tfplan
        echo "PLAN_STATUS=success" >> $GITHUB_ENV

    - name: Terraform Apply
      id: apply
      if: github.event.inputs.terraform_action == 'apply'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform apply -input=false -auto-approve tfplan
        echo "APPLY_STATUS=success" >> $GITHUB_ENV

    - name: Terraform Destroy
      id: destroy
      if: github.event.inputs.terraform_action == 'destroy'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform plan -destroy -out=tfdestroy
        terraform apply -destroy -auto-approve tfdestroy
        echo "DESTROY_STATUS=success" >> $GITHUB_ENV

  build-scan-deploy:
    name: Build, Scan, Deploy
    needs: terraform
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.terraform_action != 'destroy' &&
      (needs.terraform.outputs.PLAN_STATUS == 'success' ||
       needs.terraform.outputs.APPLY_STATUS == 'success')

    steps:
    # ----------------------------------
    # Step 1: Checkout the code
    # ----------------------------------
    - name: Checkout repository
      uses: actions/checkout@v3

    # ----------------------------------
    # Step 2: Configure AWS credentials
    # ----------------------------------
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ----------------------------------
    # Step 3: Login to Amazon ECR
    # ----------------------------------
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # ----------------------------------
    # Step 4: Build Docker image
    # ----------------------------------
    - name: Build Docker Image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE_PATH .
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # ----------------------------------
    # Step 5: Push to ECR
    # ----------------------------------
    - name: Push to ECR
      run: docker push ${{ steps.build-image.outputs.image }}

    # ----------------------------------
    # Step 6: Initiate ECR Image Scan
    # ----------------------------------
    - name: Start Image Security Scan
      id: start-scan
      run: |
        echo "Initiating security scan for image: ${{ steps.build-image.outputs.image }}"
        aws ecr start-image-scan \
          --repository-name $ECR_REPOSITORY \
          --image-id imageTag=$IMAGE_TAG \
          --region $AWS_REGION
        echo "Scan initiated successfully"

    # ----------------------------------
    # Step 7: Wait for Scan Completion
    # ----------------------------------
    - name: Wait for Scan Results
      id: wait-scan
      timeout-minutes: ${{ env.SCAN_TIMEOUT_MINUTES }}
      run: |
        echo "Waiting for scan completion (max ${{ env.SCAN_TIMEOUT_MINUTES }} minutes)..."
        
        for ((i=1; i<=$MAX_SCAN_RETRIES; i++)); do
          SCAN_STATUS=$(aws ecr describe-image-scan-findings \
            --repository-name $ECR_REPOSITORY \
            --image-id imageTag=$IMAGE_TAG \
            --region $AWS_REGION \
            --query 'imageScanStatus.status' \
            --output text || echo "PENDING")
          
          echo "Scan status: $SCAN_STATUS (attempt $i/$MAX_SCAN_RETRIES)"
          
          if [[ "$SCAN_STATUS" == "COMPLETE" ]]; then
            echo "Scan completed successfully"
            exit 0
          elif [[ "$SCAN_STATUS" == "FAILED" ]]; then
            echo "Scan failed"
            exit 1
          fi
          
          sleep 10
        done
        
        echo "Error: Scan did not complete within timeout period"
        exit 1

    # ----------------------------------
    # Step 8: Evaluate Scan Findings
    # ----------------------------------
    - name: Check Vulnerability Report
      id: check-vulnerabilities
      run: |
        # Get vulnerability counts
        FINDINGS=$(aws ecr describe-image-scan-findings \
          --repository-name $ECR_REPOSITORY \
          --image-id imageTag=$IMAGE_TAG \
          --region $AWS_REGION \
          --query 'imageScanFindings.findingSeverityCounts')
        
        CRITICAL=$(echo "$FINDINGS" | jq -r '.CRITICAL // 0')
        HIGH=$(echo "$FINDINGS" | jq -r '.HIGH // 0')
        MEDIUM=$(echo "$FINDINGS" | jq -r '.MEDIUM // 0')
        LOW=$(echo "$FINDINGS" | jq -r '.LOW // 0')
        INFORMATIONAL=$(echo "$FINDINGS" | jq -r '.INFORMATIONAL // 0')
        UNDEFINED=$(echo "$FINDINGS" | jq -r '.UNDEFINED // 0')
        
        # Generate report
        echo "=== Vulnerability Scan Results ==="
        echo "Critical: $CRITICAL"
        echo "High: $HIGH"
        echo "Medium: $MEDIUM"
        echo "Low: $LOW"
        echo "Informational: $INFORMATIONAL"
        echo "Undefined: $UNDEFINED"
        
        # Fail on Critical vulnerabilities
        if [[ $CRITICAL -gt 0 ]]; then
          echo "❌ Critical vulnerabilities detected - failing pipeline"
          exit 1
        fi
        
        # Conditionally fail on High vulnerabilities
        if [[ $HIGH -gt 0 && "$FAIL_ON_HIGH_VULNERABILITIES" == "true" ]]; then
          echo "❌ High vulnerabilities detected and FAIL_ON_HIGH_VULNERABILITIES=true - failing pipeline"
          exit 1
        elif [[ $HIGH -gt 0 ]]; then
          echo "⚠️  High vulnerabilities detected (continuing deployment)"
        fi
        
        # Export findings for subsequent steps
        echo "CRITICAL=$CRITICAL" >> $GITHUB_ENV
        echo "HIGH=$HIGH" >> $GITHUB_ENV
        echo "MEDIUM=$MEDIUM" >> $GITHUB_ENV
        echo "LOW=$LOW" >> $GITHUB_ENV

    # ----------------------------------
    # Step 9: Generate Scan Report
    # ----------------------------------
    - name: Create Scan Report
      if: always()
      run: |
        aws ecr describe-image-scan-findings \
          --repository-name $ECR_REPOSITORY \
          --image-id imageTag=$IMAGE_TAG \
          --region $AWS_REGION \
          --output json > scan-report.json
        
        echo "Scan report saved as artifact"

    # ----------------------------------
    # Step 10: Upload Scan Artifact
    # ----------------------------------
    - name: Upload Security Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ecr-scan-report-${{ github.sha }}
        path: scan-report.json
        retention-days: 7

    # ----------------------------------
    # Step 11: Deploy to ECS (if scan passed)
    # ----------------------------------
    - name: Deploy to ECS
      if: steps.check-vulnerabilities.outcome == 'success'
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ env.TF_WORKING_DIR }}/task-definition.json
        container-name: "app-container"
        image: ${{ steps.build-image.outputs.image }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        force-new-deployment: true