name: ECS Cluster CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Select Terraform action to execute'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: "us-east-1"
  TF_VERSION: "1.5.7"
  ECR_REPOSITORY: "my-app-repo"
  ECS_CLUSTER: "my-app-cluster"
  ECS_SERVICE: "my-app-service"
  DOCKERFILE_PATH: "./Dockerfile"
  TF_WORKING_DIR: "."

jobs:
  terraform:
    name: Terraform Operations
    runs-on: ubuntu-latest
    environment: production
    outputs:
      operation_status: ${{ steps.terraform.outputs.status || 'skipped' }}
      operation_type: ${{ github.event.inputs.terraform_action }}

    steps:
    # ----------------------------------
    # Step 1: Repository Checkout
    # ----------------------------------
    - name: Checkout repository
      uses: actions/checkout@v3
      description: 'Checks out the repository code to the GitHub Actions runner'

    # ----------------------------------
    # Step 2: AWS Credentials Setup
    # ----------------------------------
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      description: 'Configures AWS credentials using secrets stored in GitHub'
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ----------------------------------
    # Step 3: Terraform Installation
    # ----------------------------------
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      description: 'Installs the specified version of Terraform on the runner'
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    # ----------------------------------
    # Step 4: Terraform Initialization
    # ----------------------------------
    - name: Terraform Init
      id: init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init
      description: 'Initializes Terraform working directory and downloads providers'

    # ----------------------------------
    # Step 5: Terraform Execution
    # ----------------------------------
    - name: Run Terraform
      id: terraform
      working-directory: ${{ env.TF_WORKING_DIR }}
      description: 'Executes the specified Terraform action (plan/apply/destroy)'
      run: |
        if [ "${{ github.event.inputs.terraform_action }}" == "plan" ]; then
          terraform plan -input=false -var="sns_topic_arn=${{ vars.SNS_TOPIC_ARN || secrets.SNS_TOPIC_ARN }}"
        elif [ "${{ github.event.inputs.terraform_action }}" == "apply" ]; then
          terraform apply -input=false -auto-approve -var="sns_topic_arn=${{ vars.SNS_TOPIC_ARN || secrets.SNS_TOPIC_ARN }}"
        elif [ "${{ github.event.inputs.terraform_action }}" == "destroy" ]; then
          terraform destroy -input=false -auto-approve -var="sns_topic_arn=${{ vars.SNS_TOPIC_ARN || secrets.SNS_TOPIC_ARN }}"
        fi
        echo "status=success" >> $GITHUB_OUTPUT

    # ----------------------------------
    # Step 6: Task Definition Generation
    # ----------------------------------
    - name: Generate Task Definition
      if: github.event.inputs.terraform_action != 'destroy'
      working-directory: ${{ env.TF_WORKING_DIR }}
      description: 'Generates task-definition.json from Terraform outputs for ECS deployment'
      run: |
        if [ "${{ github.event.inputs.terraform_action }}" == "apply" ]; then
          terraform output -raw container_definitions > task-definition.json
          echo "Generated task-definition.json:"
          cat task-definition.json
        else
          echo "Skipping task definition generation for ${{ github.event.inputs.terraform_action }}"
        fi

  build-scan-deploy:
    name: Build, Scan, Deploy
    needs: terraform
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.terraform_action == 'apply' &&
      needs.terraform.outputs.operation_status == 'success'

    steps:
    # ----------------------------------
    # Step 1: Repository Checkout
    # ----------------------------------
    - name: Checkout repository
      uses: actions/checkout@v3
      description: 'Checks out the repository code to the GitHub Actions runner'

    # ----------------------------------
    # Step 2: AWS Credentials Setup
    # ----------------------------------
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      description: 'Configures AWS credentials using secrets stored in GitHub'
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ----------------------------------
    # Step 3: ECR Repository Verification
    # ----------------------------------
    - name: Verify ECR Repository
      description: 'Verifies that the ECR repository exists before proceeding'
      run: |
        aws ecr describe-repositories \
          --repository-names $ECR_REPOSITORY \
          --region $AWS_REGION || \
        (echo "ECR repository not found - did Terraform apply complete successfully?" && exit 1)

    # ----------------------------------
    # Step 4: ECR Login
    # ----------------------------------
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      description: 'Authenticates with Amazon ECR to enable Docker pushes'

    # ----------------------------------
    # Step 5: Task Definition Verification
    # ----------------------------------
    - name: Verify Task Definition
      description: 'Verifies the task-definition.json file exists and is valid'
      run: |
        if [ ! -f "task-definition.json" ]; then
          echo "::error::task-definition.json not found!"
          exit 1
        fi
        echo "Task definition contents:"
        cat task-definition.json

    # ----------------------------------
    # Step 6: Docker Image Build
    # ----------------------------------
    - name: Build Docker Image
      id: build-image
      description: 'Builds the Docker image from the specified Dockerfile'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE_PATH .
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    # ----------------------------------
    # Step 7: Image Push to ECR
    # ----------------------------------
    - name: Push to ECR
      id: push-image
      description: 'Pushes the built Docker image to Amazon ECR'
      run: |
        docker push ${{ steps.build-image.outputs.image }}
        sleep 5  # Brief pause before scan

    # ----------------------------------
    # Step 8: Security Scan Initiation
    # ----------------------------------
    - name: Start Image Security Scan
      id: start-scan
      continue-on-error: true
      description: 'Initiates a security scan of the pushed Docker image (non-blocking)'
      run: |
        echo "Initiating async security scan for image: ${{ steps.build-image.outputs.image }}"
        aws ecr start-image-scan \
          --repository-name $ECR_REPOSITORY \
          --image-id imageTag=${{ steps.build-image.outputs.image_tag }} \
          --region $AWS_REGION || echo "Scan initiation failed - continuing deployment"

    # ----------------------------------
    # Step 9: ECS Deployment
    # ----------------------------------
    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      description: 'Deploys the task definition to Amazon ECS service with the new image'
      with:
        task-definition: ./task-definition.json
        container-name: "my-app-container"
        image: ${{ steps.build-image.outputs.image }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        force-new-deployment: true