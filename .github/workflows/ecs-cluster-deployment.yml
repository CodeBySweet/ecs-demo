name: ECS Cluster and Application Deployment

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose 'apply' to create resources or 'destroy' to tear them down."
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

env:
  AWS_REGION: us-east-1

permissions:
  id-token: write
  contents: read

jobs:
  deploy-or-destroy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials via OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::626635421987:role/GitHubOIDCRole
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Step 4: Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Step 5: Terraform Plan (if action is 'apply')
      - name: Terraform Plan
        if: github.event.inputs.action == 'apply'
        run: terraform plan

      # Step 6: Apply or Destroy Terraform configuration
      - name: Terraform Apply or Destroy
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform apply -auto-approve
          else
            terraform destroy -auto-approve
          fi

      # Step 7: Get Terraform outputs (updated)
      - name: Get Terraform Outputs
        if: github.event.inputs.action == 'apply'
        id: terraform-outputs
        run: |
          # Get all outputs as JSON
          OUTPUTS=$(terraform output -json)
          
          # Parse JSON to get clean values
          ECR_REPO_URL=$(echo $OUTPUTS | jq -r '.ecr_repository_url.value')
          ECR_REPO_NAME=$(echo $ECR_REPO_URL | cut -d'/' -f2)
          
          # Set environment variables
          echo "ECR_REPO_URL=${ECR_REPO_URL}" >> $GITHUB_ENV
          echo "ECR_REPO_NAME=${ECR_REPO_NAME}" >> $GITHUB_ENV
          
          echo "Repository URL: ${ECR_REPO_URL}"
          echo "Repository Name: ${ECR_REPO_NAME}"

      # Step 8: Login to Amazon ECR
      - name: Log in to Amazon ECR
        if: github.event.inputs.action == 'apply'
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ env.AWS_REGION }}

      # Step 9: Build and push Docker image (updated)
      - name: Build and Push Docker Image
        if: github.event.inputs.action == 'apply' && env.ECR_REPO_URL
        run: |
          docker build -t ${ECR_REPO_URL}:latest .
          docker push ${ECR_REPO_URL}:latest

      # Step 10: Start ECR image scan (updated)
      - name: Start ECR Image Scan
        if: github.event.inputs.action == 'apply' && env.ECR_REPO_NAME
        run: |
          aws ecr start-image-scan \
            --repository-name ${ECR_REPO_NAME} \
            --image-id imageTag=latest \
            --region ${AWS_REGION}

      # Step 11: Wait for ECR scan to complete
      - name: Wait for ECR Scan Completion
        if: github.event.inputs.action == 'apply' && env.ECR_REPOSITORY_URL
        run: |
          for i in {1..18}; do
            SCAN_STATUS=$(aws ecr describe-image-scan-findings --repository-name $ECR_REPOSITORY --image-id imageTag=latest --region $AWS_REGION --query 'imageScanStatus.status' --output text || echo "NOT_FOUND")
            if [[ "$SCAN_STATUS" == "COMPLETE" ]]; then
              echo "Scan completed successfully."; exit 0;
            elif [[ "$SCAN_STATUS" == "FAILED" ]]; then
              echo "Scan failed."; exit 1;
            fi
            echo "Waiting for scan to complete ($i/18)..."
            sleep 10
          done
          echo "Scan did not complete in time. Proceeding anyway."

      # Step 12: Deploy updated image to ECS
      - name: Force ECS Deployment
        if: github.event.inputs.action == 'apply' && env.ECS_CLUSTER_NAME && env.ECS_SERVICE_NAME
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment --region $AWS_REGION