name: ECS Cluster CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Select Terraform action to execute'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: "us-east-1"
  TF_VERSION: "1.5.7"
  ECR_REPOSITORY: "my-app-repo"
  ECS_CLUSTER: "my-app-cluster"
  ECS_SERVICE: "my-app-service"
  DOCKERFILE_PATH: "./Dockerfile"
  TF_WORKING_DIR: "."

jobs:
  terraform:
    name: Terraform Operations
    runs-on: ubuntu-latest
    environment: production
    outputs:
      operation_status: ${{ steps.set-status.outputs.status }}
      operation_type: ${{ github.event.inputs.terraform_action }}
      ecr_repository_url: ${{ steps.set-outputs.outputs.ecr_repository_url || 'none' }}
      ecs_task_execution_role_arn: ${{ steps.set-outputs.outputs.ecs_task_execution_role_arn || 'none' }}
      ecs_task_role_arn: ${{ steps.set-outputs.outputs.ecs_task_role_arn || 'none' }}

    steps:
    # Step 1: Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Step 3: Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    # Step 4: Terraform Init
    - name: Terraform Init
      id: init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    # Step 5: Run Terraform Plan
    - name: Terraform Plan
      if: github.event.inputs.terraform_action == 'plan'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform plan -input=false -no-color

    # Step 6: Run Terraform Apply
    - name: Terraform Apply
      if: github.event.inputs.terraform_action == 'apply'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform apply -input=false -auto-approve

    # Step 7: Run Terraform Destroy
    - name: Terraform Destroy
      if: github.event.inputs.terraform_action == 'destroy'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform destroy -input=false -auto-approve

    # Step 8: Set Status
    - name: Set Status
      id: set-status
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: echo "status=success" >> $GITHUB_OUTPUT

    # Step 9: Capture Terraform Outputs (only for apply)
    - name: Capture Terraform Outputs
      id: set-outputs
      if: github.event.inputs.terraform_action == 'apply'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
        echo "ecs_task_execution_role_arn=$(terraform output -raw ecs_task_execution_role_arn)" >> $GITHUB_OUTPUT
        echo "ecs_task_role_arn=$(terraform output -raw ecs_task_role_arn)" >> $GITHUB_OUTPUT

  build-scan-deploy:
    name: Build, Scan, Deploy
    needs: terraform
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.terraform_action == 'apply' &&
      needs.terraform.outputs.operation_status == 'success'

    steps:
    # Step 1: Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Step 3: Verify ECR Repository
    - name: Verify ECR Repository
      run: |
        aws ecr describe-repositories \
          --repository-names $ECR_REPOSITORY \
          --region $AWS_REGION

    # Step 4: Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Step 5: Build Docker Image
    - name: Build Docker Image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE_PATH .
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    # Step 6: Push to ECR
    - name: Push to ECR
      id: push-image
      run: |
        docker push ${{ steps.build-image.outputs.image }}
        sleep 5

    # Step 7: Start Image Security Scan
    - name: Start Image Security Scan
      id: start-scan
      continue-on-error: true
      run: |
        echo "Initiating async security scan for image: ${{ steps.build-image.outputs.image }}"
        aws ecr start-image-scan \
          --repository-name $ECR_REPOSITORY \
          --image-id imageTag=${{ steps.build-image.outputs.image_tag }} \
          --region $AWS_REGION || echo "Scan initiation failed - continuing deployment"

    # Step 8: Create imagedefinitions.json
    - name: Create imagedefinitions.json
      run: |
        echo '[{
          "name": "my-app-container",
          "imageUri": "'${{ steps.build-image.outputs.image }}'"
        }]' > imagedefinitions.json

    # Step 9: Update ECS Service
    - name: Update ECS Service
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --force-new-deployment