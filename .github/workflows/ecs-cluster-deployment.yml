name: ECS Cluster CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Select Terraform action to execute'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: "us-east-1"
  TF_VERSION: "1.5.7"
  ECR_REPOSITORY: "my-app-repo"
  ECS_CLUSTER: "my-app-cluster"
  ECS_SERVICE: "my-app-service"
  DOCKERFILE_PATH: "./Dockerfile"
  TF_WORKING_DIR: "."

jobs:
  terraform:
    name: Terraform Operations
    runs-on: ubuntu-latest
    environment: production
    outputs:
      plan_status: ${{ steps.plan.outputs.status || 'skipped' }}
      apply_status: ${{ steps.apply.outputs.status || 'skipped' }}

    steps:
    # ----------------------------------
    # Step 1: Checkout the code
    # ----------------------------------
    - name: Checkout repository
      uses: actions/checkout@v3

    # ----------------------------------
    # Step 2: Configure AWS credentials
    # ----------------------------------
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ----------------------------------
    # Step 3: Setup Terraform
    # ----------------------------------
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    # ----------------------------------
    # Step 4: Initialize Terraform
    # ----------------------------------
    - name: Terraform Init
      id: init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    # ----------------------------------
    # Step 5: Validate Terraform configuration (only for plan)
    # ----------------------------------
    - name: Terraform Validate
      id: validate
      if: github.event.inputs.terraform_action == 'plan'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform validate
      
    # ----------------------------------
    # Step 6: Check Terraform formatting (only for plan)
    # ----------------------------------
    - name: Terraform Format Check
      id: fmt
      if: github.event.inputs.terraform_action == 'plan'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform fmt -check -recursive

    # ----------------------------------
    # Step 7: Conditional Terraform Operations
    # ----------------------------------
    - name: Terraform Plan
      id: plan
      if: github.event.inputs.terraform_action == 'plan'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform plan \
          -input=false \
          -var="sns_topic_arn=${{ vars.SNS_TOPIC_ARN || secrets.SNS_TOPIC_ARN }}"
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: Terraform Apply
      id: apply
      if: github.event.inputs.terraform_action == 'apply'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform apply \
          -input=false \
          -auto-approve \
          -var="sns_topic_arn=${{ vars.SNS_TOPIC_ARN || secrets.SNS_TOPIC_ARN }}"
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Terraform Destroy
      id: destroy
      if: github.event.inputs.terraform_action == 'destroy'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform destroy \
          -input=false \
          -auto-approve \
          -var="sns_topic_arn=${{ vars.SNS_TOPIC_ARN || secrets.SNS_TOPIC_ARN }}"
        echo "DESTROY_STATUS=success" >> $GITHUB_ENV

  build-scan-deploy:
    name: Build, Scan, Deploy
    needs: terraform
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.terraform_action != 'destroy' &&
      (needs.terraform.outputs.apply_status == 'success' ||
       (github.event.inputs.terraform_action == 'plan' && needs.terraform.outputs.plan_status == 'success'))

    steps:
    # ----------------------------------
    # Step 1: Checkout the code
    # ----------------------------------
    - name: Checkout repository
      uses: actions/checkout@v3

    # ----------------------------------
    # Step 2: Configure AWS credentials
    # ----------------------------------
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ----------------------------------
    # Step 3: Login to Amazon ECR
    # ----------------------------------
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # ----------------------------------
    # Step 4: Build Docker image
    # ----------------------------------
    - name: Build Docker Image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE_PATH .
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    # ----------------------------------
    # Step 5: Push to ECR
    # ----------------------------------
    - name: Push to ECR
      id: push-image
      run: |
        docker push ${{ steps.build-image.outputs.image }}
        sleep 5  # Brief pause before scan

    # ----------------------------------
    # Step 6: Initiate ECR Image Scan (without evaluation)
    # ----------------------------------
    - name: Start Image Security Scan
      id: start-scan
      continue-on-error: true  # Don't fail if scan can't be started
      run: |
        echo "Initiating async security scan for image: ${{ steps.build-image.outputs.image }}"
        aws ecr start-image-scan \
          --repository-name $ECR_REPOSITORY \
          --image-id imageTag=${{ steps.build-image.outputs.image_tag }} \
          --region $AWS_REGION || echo "Scan initiation failed - continuing deployment"

    # ----------------------------------
    # Step 7: Deploy to ECS
    # ----------------------------------
    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ./task-definition.json
        container-name: "my-app-container"
        image: ${{ steps.build-image.outputs.image }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        force-new-deployment: true