name: ECS Cluster Deployment | Teardown

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose 'apply' to create resources or 'destroy' to remove them"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  MAX_SCAN_ATTEMPTS: 18
  SCAN_WAIT_INTERVAL: 10

permissions:
  id-token: write
  contents: read

jobs:
  infrastructure:
    name: "${{ github.event.inputs.action == 'apply' && 'Deploy' || 'Destroy' }} Infrastructure"
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout the code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::626635421987:role/GitHubOIDCRole
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Step 4: Initialize Terraform
      - name: Initialize Terraform
        run: terraform init

      # Step 5: Terraform Plan (if action is 'apply')
      - name: Terraform Plan
        if: github.event.inputs.action == 'apply'
        run: terraform plan

      # Step 6: Apply or Destroy Infrastructure
      - name: "${{ github.event.inputs.action == 'apply' && 'Apply' || 'Destroy' }} Infrastructure"
        run: |
          terraform ${{ github.event.inputs.action }} -auto-approve

      # Step 7: Get Terraform outputs
      - name: Capture Outputs
        if: github.event.inputs.action == 'apply'
        id: outputs
        run: |
          ECR_REPO_URL=$(terraform output -raw ecr_repository_url | tr -d '\n')
          ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name | tr -d '\n')
          ECS_SERVICE_NAME=$(terraform output -raw ecs_service_name | tr -d '\n')
          
          echo "ECR_REPO_URL=${ECR_REPO_URL}" >> $GITHUB_OUTPUT
          echo "ECS_CLUSTER_NAME=${ECS_CLUSTER_NAME}" >> $GITHUB_OUTPUT
          echo "ECS_SERVICE_NAME=${ECS_SERVICE_NAME}" >> $GITHUB_OUTPUT

      # Step 8: Login to Amazon ECR
      - name: Login to ECR
        if: github.event.inputs.action == 'apply'
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ env.AWS_REGION }}

      # Step 9: Build and push Docker image
      - name: Build & Push Docker Image
        if: github.event.inputs.action == 'apply' && steps.outputs.outputs.ECR_REPO_URL
        run: |
          docker build -t ${{ steps.outputs.outputs.ECR_REPO_URL }}:latest .
          docker push ${{ steps.outputs.outputs.ECR_REPO_URL }}:latest

      # Step 10: Start ECR image scan
      - name: Initiate Image Scan
        if: github.event.inputs.action == 'apply' && steps.outputs.outputs.ECR_REPO_URL
        run: |
          aws ecr start-image-scan \
            --repository-name $(echo ${{ steps.outputs.outputs.ECR_REPO_URL }} | cut -d'/' -f2) \
            --image-id imageTag=latest \
            --region ${{ env.AWS_REGION }}

      # Step 11: Wait for ECR scan to complete
      - name: Await Scan Results
        if: github.event.inputs.action == 'apply' && steps.outputs.outputs.ECR_REPO_URL
        run: |
          REPO_NAME=$(echo ${{ steps.outputs.outputs.ECR_REPO_URL }} | cut -d'/' -f2)
          for ((i=1; i<=${{ env.MAX_SCAN_ATTEMPTS }}; i++)); do
            STATUS=$(aws ecr describe-image-scan-findings \
              --repository-name $REPO_NAME \
              --image-id imageTag=latest \
              --region ${{ env.AWS_REGION }} \
              --query 'imageScanStatus.status' \
              --output text || echo "PENDING")
            
            case $STATUS in
              "COMPLETE") echo "Scan completed"; exit 0 ;;
              "FAILED") echo "Scan failed"; exit 1 ;;
              *) echo "Attempt $i/${{ env.MAX_SCAN_ATTEMPTS }}: Scan status - $STATUS" ;;
            esac
            sleep ${{ env.SCAN_WAIT_INTERVAL }}
          done
          echo "Scan timeout reached - proceeding with deployment"

      # Step 12: Force new ECS deployment
      - name: Force ECS Deployment
        if: github.event.inputs.action == 'apply' && steps.outputs.outputs.ECS_CLUSTER_NAME && steps.outputs.outputs.ECS_SERVICE_NAME
        run: |
          aws ecs update-service \
            --cluster ${{ steps.outputs.outputs.ECS_CLUSTER_NAME }} \
            --service ${{ steps.outputs.outputs.ECS_SERVICE_NAME }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}