name: ECS Cluster CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Select Terraform action to execute'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: "us-east-1"
  TF_VERSION: "1.5.7"
  ECR_REPOSITORY: "my-app-repo"
  ECS_CLUSTER: "my-app-cluster"
  ECS_SERVICE: "my-app-service"
  DOCKERFILE_PATH: "./Dockerfile"
  TF_WORKING_DIR: "."

jobs:
  terraform:
    name: Terraform Operations
    runs-on: ubuntu-latest
    environment: production
    outputs:
      operation_status: ${{ steps.terraform.outputs.status || 'skipped' }}
      operation_type: ${{ github.event.inputs.terraform_action }}
      ecr_repository_url: ${{ steps.set-outputs.outputs.ecr_repository_url }}
      ecs_task_execution_role_arn: ${{ steps.set-outputs.outputs.ecs_task_execution_role_arn }}
      ecs_task_role_arn: ${{ steps.set-outputs.outputs.ecs_task_role_arn }}

    steps:
    # ----------------------------------
    # Step: Checkout repository
    # ----------------------------------
    - name: Checkout repository
      uses: actions/checkout@v3

    # ----------------------------------
    # Step: Configure AWS credentials
    # Description: Sets up AWS credentials for Terraform to use
    # ----------------------------------
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ----------------------------------
    # Step: Setup Terraform
    # Description: Installs specified version of Terraform
    # ----------------------------------
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    # ----------------------------------
    # Step: Terraform Init
    # Description: Initializes Terraform working directory
    # ----------------------------------
    - name: Terraform Init
      id: init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    # ----------------------------------
    # Step: Run Terraform
    # Description: Executes Terraform plan/apply/destroy based on user input
    # ----------------------------------
    - name: Run Terraform
      id: terraform
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        if [ "${{ github.event.inputs.terraform_action }}" == "plan" ]; then
          terraform plan -input=false -var="sns_topic_arn=${{ vars.SNS_TOPIC_ARN || secrets.SNS_TOPIC_ARN }}"
        elif [ "${{ github.event.inputs.terraform_action }}" == "apply" ]; then
          terraform apply -input=false -auto-approve -var="sns_topic_arn=${{ vars.SNS_TOPIC_ARN || secrets.SNS_TOPIC_ARN }}"
        elif [ "${{ github.event.inputs.terraform_action }}" == "destroy" ]; then
          terraform destroy -input=false -auto-approve -var="sns_topic_arn=${{ vars.SNS_TOPIC_ARN || secrets.SNS_TOPIC_ARN }}"
        fi
        echo "status=success" >> $GITHUB_OUTPUT

    # ----------------------------------
    # Step: Capture Terraform Outputs
    # Description: Captures outputs for use in subsequent jobs
    # ----------------------------------
    - name: Capture Terraform Outputs
      id: set-outputs
      working-directory: ${{ env.TF_WORKING_DIR }}
      if: ${{ github.event.inputs.terraform_action == 'apply' && steps.terraform.outcome == 'success' }}
      run: |
        echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
        echo "ecs_task_execution_role_arn=$(terraform output -raw ecs_task_execution_role_arn)" >> $GITHUB_OUTPUT
        echo "ecs_task_role_arn=$(terraform output -raw ecs_task_role_arn)" >> $GITHUB_OUTPUT
        echo "Captured outputs:"
        echo "ECR Repository URL: $(terraform output -raw ecr_repository_url)"
        echo "ECS Execution Role ARN: $(terraform output -raw ecs_task_execution_role_arn)"
        echo "ECS Task Role ARN: $(terraform output -raw ecs_task_role_arn)"

  build-scan-deploy:
    name: Build, Scan, Deploy
    needs: terraform
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.terraform_action == 'apply' &&
      needs.terraform.outputs.operation_status == 'success'

    steps:
    # ----------------------------------
    # Step: Checkout repository
    # Description: Checks out the source code including static task-definition.json
    # ----------------------------------
    - name: Checkout repository
      uses: actions/checkout@v3

    # ----------------------------------
    # Step: Configure AWS credentials
    # Description: Sets up AWS credentials for ECR/ECS operations
    # ----------------------------------
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ----------------------------------
    # Step: Verify ECR Repository
    # Description: Verifies ECR repository was created by Terraform
    # ----------------------------------
    - name: Verify ECR Repository
      run: |
        aws ecr describe-repositories \
          --repository-names $ECR_REPOSITORY \
          --region $AWS_REGION || \
        (echo "ECR repository not found - did Terraform apply complete successfully?" && exit 1)

    # ----------------------------------
    # Step: Login to Amazon ECR
    # Description: Logs in to ECR to enable Docker pushes
    # ----------------------------------
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # ----------------------------------
    # Step: Build Docker Image
    # Description: Builds Docker image from Dockerfile
    # ----------------------------------
    - name: Build Docker Image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKERFILE_PATH .
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    # ----------------------------------
    # Step: Push to ECR
    # Description: Pushes built Docker image to ECR repository
    # ----------------------------------
    - name: Push to ECR
      id: push-image
      run: |
        docker push ${{ steps.build-image.outputs.image }}
        sleep 5

    # ----------------------------------
    # Step: Start Image Security Scan
    # Description: Initiates security scan of pushed Docker image
    # ----------------------------------
    - name: Start Image Security Scan
      id: start-scan
      continue-on-error: true
      run: |
        echo "Initiating async security scan for image: ${{ steps.build-image.outputs.image }}"
        aws ecr start-image-scan \
          --repository-name $ECR_REPOSITORY \
          --image-id imageTag=${{ steps.build-image.outputs.image_tag }} \
          --region $AWS_REGION || echo "Scan initiation failed - continuing deployment"

    # ----------------------------------
    # Step: Prepare Task Definition
    # Description: Updates placeholders in static task definition file
    # ----------------------------------
    - name: Prepare Task Definition
      id: prepare-task-def
      run: |
        # Verify and update task definition
        jq \
          --arg er "${{ needs.terraform.outputs.ecs_task_execution_role_arn }}" \
          --arg tr "${{ needs.terraform.outputs.ecs_task_role_arn }}" \
          --arg img "${{ steps.build-image.outputs.image }}" \
          '.executionRoleArn = $er | .taskRoleArn = $tr | .containerDefinitions[0].image = $img' \
          task-definition.json > updated-task-definition.json
        
        # Verify and show result
        jq empty updated-task-definition.json
        cat updated-task-definition.json

    # ----------------------------------
    # Step: Deploy to ECS
    # Description: Deploys the new task definition to ECS service
    # ----------------------------------
    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: updated-task-definition.json
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        force-new-deployment: true