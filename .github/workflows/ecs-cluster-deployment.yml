name: ECS Cluster CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Select Terraform action to execute'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: "us-east-1"
  TF_VERSION: "1.5.7"
  ECR_REPOSITORY: "my-app-repo"
  ECS_CLUSTER: "my-app-cluster"
  ECS_SERVICE: "my-app-service"
  DOCKERFILE_PATH: "./Dockerfile"
  TF_WORKING_DIR: "."
  IMAGE_TAG: "latest"

jobs:
  terraform:
    name: Terraform Operations
    runs-on: ubuntu-latest
    environment: production
    outputs:
      operation_status: ${{ steps.set-status.outputs.status }}
      operation_type: ${{ github.event.inputs.terraform_action }}
      ecr_repository_url: ${{ steps.set-outputs.outputs.ecr_repository_url || 'none' }}
      ecs_task_execution_role_arn: ${{ steps.set-outputs.outputs.ecs_task_execution_role_arn || 'none' }}
      ecs_task_role_arn: ${{ steps.set-outputs.outputs.ecs_task_role_arn || 'none' }}

    steps:
    # Step 1: Checkout repository - Gets the source code for Terraform to use
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Configure AWS credentials - Sets up AWS access for Terraform operations
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Step 3: Cache Terraform plugins - Speeds up runs by caching provider plugins
    - name: Cache Terraform plugins
      uses: actions/cache@v3
      id: tf-cache
      with:
        path: |
          ${{ env.TF_WORKING_DIR }}/.terraform
          ${{ env.TF_WORKING_DIR }}/.terraform.lock.hcl
        key: tf-${{ hashFiles('${{ env.TF_WORKING_DIR }}/.terraform.lock.hcl') }}

    # Step 4: Setup Terraform - Installs the specified Terraform version
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false

    # Step 5: Terraform Format Check - Ensures consistent code formatting
    - name: Terraform Format Check
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform fmt -check -diff -recursive

    # Step 6: Terraform Init - Initializes the Terraform working directory
    - name: Terraform Init
      id: init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    # Step 7: Terraform Validate - Checks for syntax errors
    - name: Terraform Validate
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform validate

    # Step 8: Terraform Plan - Shows execution plan (dry-run)
    - name: Terraform Plan
      if: github.event.inputs.terraform_action == 'plan'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform plan -input=false -no-color

    # Step 9: Terraform Apply - Creates/updates infrastructure
    - name: Terraform Apply
      if: github.event.inputs.terraform_action == 'apply'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform apply -input=false -auto-approve

    # Step 10: Terraform Destroy - Removes all infrastructure
    - name: Terraform Destroy
      if: github.event.inputs.terraform_action == 'destroy'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform destroy -input=false -auto-approve

    # Step 11: Set Status - Marks operation as successful
    - name: Set Status
      id: set-status
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: echo "status=success" >> $GITHUB_OUTPUT

    # Step 12: Capture Terraform Outputs - Saves outputs for build job
    - name: Capture Terraform Outputs
      id: set-outputs
      if: github.event.inputs.terraform_action == 'apply'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
        echo "ecs_task_execution_role_arn=$(terraform output -raw ecs_task_execution_role_arn)" >> $GITHUB_OUTPUT
        echo "ecs_task_role_arn=$(terraform output -raw ecs_task_role_arn)" >> $GITHUB_OUTPUT

  build-scan-deploy:
    name: Build, Scan, Deploy
    needs: terraform
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.terraform_action == 'apply' &&
      needs.terraform.outputs.operation_status == 'success'

    steps:
    # Step 1: Checkout repository - Gets source code for Docker build
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Configure AWS credentials - Sets up AWS access for ECR/ECS
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Step 3: Verify ECR Repository - Confirms repository exists
    - name: Verify ECR Repository
      run: |
        aws ecr describe-repositories \
          --repository-names $ECR_REPOSITORY \
          --region $AWS_REGION

    # Step 4: Login to Amazon ECR - Authenticates Docker with ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Step 5: Docker Metadata Action - Generates image tags/labels
    - name: Docker Metadata Action
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=raw,value=${{ env.IMAGE_TAG }},enable=${{ true }}

    # Step 6: Set up Docker Buildx - Configures advanced build features
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: |
          image=moby/buildkit:latest

    # Step 7: Build and Push with Buildx - Builds and pushes container image
    - name: Build and Push with Buildx
      id: build-push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ${{ env.DOCKERFILE_PATH }}
        platforms: linux/amd64
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max,compression=zstd
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    # Step 8: Scan for vulnerabilities using Trivy
    - name: Scan for Critical vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        format: 'json'
        output: 'trivy-results.json'
        severity: 'CRITICAL'
        ignore-unfixed: true
        scanners: 'vuln'
        exit-code: '1'
        cache-dir: '/tmp/trivy-cache'

    # Step 9: Optional scan for High vulnerabilities (warning only)
    - name: Scan for High vulnerabilities
      if: always()
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        format: 'json'
        severity: 'HIGH'
        ignore-unfixed: true
        scanners: 'vuln'
        exit-code: '0'  # Don't fail the workflow for High severity
        cache-dir: '/tmp/trivy-cache'

    # Step 10: Scan for Critical vulnerabilities
    - name: Scan for Critical vulnerabilities
      id: trivy-critical-scan
      run: |
        # Verify image reference exists
        if [ -z "${{ steps.image-ref.outputs.full_image_ref }}" ]; then
          echo "::error::Empty image reference"
          exit 1
        fi

        # Run Trivy scan with proper error handling
        echo "Starting critical vulnerability scan..."
        if ! trivy image \
          --timeout 5m \
          --severity CRITICAL \
          --ignore-unfixed \
          --no-progress \
          --format json \
          --scanners vuln \
          --cache-dir /tmp/trivy-cache \
          "${{ steps.image-ref.outputs.full_image_ref }}" > trivy-critical.json 2>trivy-error.log; then
          
          echo "::error::Trivy scan failed"
          echo "Error logs:"
          cat trivy-error.log
          exit 1
        fi

        # Count CRITICAL vulnerabilities
        CRITICAL_COUNT=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-critical.json)
        
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "::error::Found $CRITICAL_COUNT CRITICAL severity vulnerabilities - blocking deployment"
          jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL") | "\(.VulnerabilityID): \(.Title) (Fixed in: \(.FixedVersion | if . then . else "None" end))"' trivy-critical.json
          exit 1
        else
          echo "No CRITICAL severity vulnerabilities found"
        fi

    # Step 11: Scan for High vulnerabilities (warning only)
    - name: Scan for High vulnerabilities
      if: always()
      run: |
        echo "Starting high vulnerability scan..."
        if ! trivy image \
          --timeout 5m \
          --severity HIGH \
          --ignore-unfixed \
          --no-progress \
          --format json \
          --scanners vuln \
          --cache-dir /tmp/trivy-cache \
          "${{ steps.image-ref.outputs.full_image_ref }}" > trivy-high.json 2>trivy-high-error.log; then
          
          echo "::warning::Trivy high severity scan failed"
          echo "Error logs:"
          cat trivy-high-error.log
          exit 0  # Continue despite high severity scan failure
        fi

        # Count HIGH vulnerabilities
        HIGH_COUNT=$(jq -r '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-high.json)
        
        if [ "$HIGH_COUNT" -gt 0 ]; then
          echo "::warning::Found $HIGH_COUNT HIGH severity vulnerabilities (not blocking deployment)"
          jq -r '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH") | "\(.VulnerabilityID): \(.Title) (Fixed in: \(.FixedVersion | if . then . else "None" end))"' trivy-high.json
        else
          echo "No HIGH severity vulnerabilities found"
        fi

    # Step 12: Verify Deployment - Ensures new tasks are healthy
    - name: Verify Deployment
      if: steps.trivy-critical-scan.outcome == 'success'  # Only verify if no CRITICAL vulnerabilities
      run: |
        echo "Waiting for deployment to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }}
